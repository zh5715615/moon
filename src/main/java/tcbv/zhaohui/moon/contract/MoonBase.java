package tcbv.zhaohui.moon.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class MoonBase extends Contract {
    public static final String BINARY = "6080604052600160025f6101000a81548160ff021916908360018111156200002c576200002b62000580565b5b021790555073dac17f958d2ee523a2206206994597c13d831ec7600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4600460146101000a81548161ffff021916908361ffff160217905550612710600460166101000a81548161ffff021916908361ffff160217905550348015620000d0575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000145575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200013c9190620005f0565b60405180910390fd5b6200015681620002b060201b60201c565b506060806005908051906020019062000171929190620004d7565b5073a841b274de2b521c10e77643071206004bbf8c0760035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507357ae92e2611887ef4c8ab58c45e74a16fbc8329e60045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200024c7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929336200037160201b60201c565b50620002615f801b336200037160201b60201c565b50620002a87f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92973171d1460a0b3a91b8438f6f776a8cd8a34d49dd46200037160201b60201c565b50506200060b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200038483836200046c60201b60201c565b62000462576001805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620003fe620004d060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905062000466565b5f90505b92915050565b5f60015f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b828054828255905f5260205f2090810192821562000550579160200282015b828111156200054f578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620004f6565b5b5090506200055f919062000563565b5090565b5b808211156200057c575f815f90555060010162000564565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620005d882620005ad565b9050919050565b620005ea81620005cc565b82525050565b5f602082019050620006055f830184620005df565b92915050565b6138ec80620006195f395ff3fe608060405234801561000f575f80fd5b506004361061020f575f3560e01c806373f8851311610123578063a217fddf116100ab578063ea6c00231161007a578063ea6c00231461061b578063f2fde38b14610637578063f5b541a614610653578063fbfa77cf14610671578063fcb53d361461068f5761020f565b8063a217fddf14610593578063c486456c146105b1578063c6255626146105cf578063d547741f146105ff5761020f565b8063819aa007116100f2578063819aa007146104ed578063894760691461050b5780638da5cb5b14610527578063900407bc1461054557806391d14854146105635761020f565b806373f8851314610453578063763191901461046f5780637b2b5f671461048b5780637c01800d146104bd5761020f565b80633a40481d116101a65780635c413fa8116101755780635c413fa8146103c357806361c3efb1146103f35780636817031b146104115780636d69fcaf1461042d578063715018a6146104495761020f565b80633a40481d1461034f5780633ccfd60b146103815780634eeea2f21461038b57806356de96db146103a75761020f565b80632f2ff15d116101e25780632f2ff15d146102c657806334461067146102e257806336568abe1461031757806337d629a6146103335761020f565b806301ffc9a71461021357806303e9e60914610243578063248a9ca31461027857806329728c6e146102a8575b5f80fd5b61022d60048036038101906102289190612615565b6106ad565b60405161023a919061265a565b60405180910390f35b61025d600480360381019061025891906126a6565b610726565b60405161026f969594939291906127a9565b60405180910390f35b610292600480360381019061028d9190612842565b610886565b60405161029f919061287c565b60405180910390f35b6102b06108a3565b6040516102bd9190612895565b60405180910390f35b6102e060048036038101906102db91906128d8565b6108c8565b005b6102fc60048036038101906102f791906126a6565b6108ea565b60405161030e969594939291906127a9565b60405180910390f35b610331600480360381019061032c91906128d8565b6109e6565b005b61034d60048036038101906103489190612977565b610a61565b005b61036960048036038101906103649190612842565b610edc565b604051610378939291906129e8565b60405180910390f35b610389610f21565b005b6103a560048036038101906103a09190612a1d565b610fe6565b005b6103c160048036038101906103bc9190612a6b565b611032565b005b6103dd60048036038101906103d89190612acf565b611066565b6040516103ea9190612b0d565b60405180910390f35b6103fb611086565b6040516104089190612b42565b60405180910390f35b61042b60048036038101906104269190612a1d565b61109a565b005b61044760048036038101906104429190612a1d565b6110e5565b005b610451611150565b005b61046d60048036038101906104689190612b85565b611163565b005b61048960048036038101906104849190612a1d565b6111cc565b005b6104a560048036038101906104a091906128d8565b611357565b6040516104b4939291906129e8565b60405180910390f35b6104d760048036038101906104d29190612a1d565b6113d2565b6040516104e49190612bd2565b60405180910390f35b6104f56113f2565b6040516105029190612895565b60405180910390f35b61052560048036038101906105209190612a1d565b611418565b005b61052f6115ac565b60405161053c9190612895565b60405180910390f35b61054d6115d3565b60405161055a9190612b0d565b60405180910390f35b61057d600480360381019061057891906128d8565b6115d9565b60405161058a919061265a565b60405180910390f35b61059b61163d565b6040516105a8919061287c565b60405180910390f35b6105b9611643565b6040516105c69190612c5e565b60405180910390f35b6105e960048036038101906105e491906126a6565b611655565b6040516105f69190612895565b60405180910390f35b610619600480360381019061061491906128d8565b611690565b005b61063560048036038101906106309190612ccc565b6116b2565b005b610651600480360381019061064c9190612a1d565b611aef565b005b61065b611b73565b604051610668919061287c565b60405180910390f35b610679611b97565b6040516106869190612895565b60405180910390f35b610697611bbc565b6040516106a49190612b42565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071f575061071e82611bd0565b5b9050919050565b5f805f805f606060065f8881526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8981526020019081526020015f206001015460065f8a81526020019081526020015f206002015460065f8b81526020019081526020015f206003015460065f8c81526020019081526020015f206004015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8d81526020019081526020015f206005018080546107f390612d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461081f90612d7d565b801561086a5780601f106108415761010080835404028352916020019161086a565b820191905f5260205f20905b81548152906001019060200180831161084d57829003601f168201915b5050505050905095509550955095509550955091939550919395565b5f60015f8381526020019081526020015f20600101549050919050565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108d182610886565b6108da81611c39565b6108e48383611c4d565b50505050565b6006602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501805461096590612d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461099190612d7d565b80156109dc5780601f106109b3576101008083540402835291602001916109dc565b820191905f5260205f20905b8154815290600101906020018083116109bf57829003601f168201915b5050505050905086565b6109ee611d36565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a52576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a5c8282611d3d565b505050565b835f805b600580549050811015610afc578273ffffffffffffffffffffffffffffffffffffffff1660058281548110610a9d57610a9c612dad565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ae95760019150610afc565b8080610af490612e07565b915050610a65565b5080610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490612e98565b60405180910390fd5b600180811115610b5057610b4f612beb565b5b60025f9054906101000a900460ff166001811115610b7157610b70612beb565b5b14610bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba890612f00565b60405180910390fd5b5f610bbd338888611e27565b90506040518060c001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018281526020015f81526020013373ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060065f60075481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019081610d2b91906130e8565b509050505f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900463ffffffff169050600181610d8c91906131b7565b60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548163ffffffff021916908363ffffffff16021790555060075460095f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600184610e3491906131b7565b63ffffffff1663ffffffff1681526020019081526020015f20819055508585604051610e6192919061322a565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f5212e1a295c6c84c70054418822dc57308834e683568840f8282bd58f1d1913e6007548a604051610eb3929190613242565b60405180910390a360075f815480929190610ecd90612e07565b91905055505050505050505050565b600a602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b610f296123ed565b5f4790505f60019050610f3a6115ac565b73ffffffffffffffffffffffffffffffffffffffff1682604051610f5d90613296565b5f6040518083038185875af1925050503d805f8114610f97576040519150601f19603f3d011682016040523d82523d5f602084013e610f9c565b606091505b50508091505080610fe2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd9906132f4565b60405180910390fd5b5050565b610fee6123ed565b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61103a6123ed565b8060025f6101000a81548160ff0219169083600181111561105e5761105d612beb565b5b021790555050565b6009602052815f5260405f20602052805f5260405f205f91509150505481565b600460169054906101000a900461ffff1681565b6110a26123ed565b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110ed6123ed565b600581908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111586123ed565b6111615f612474565b565b61116b6123ed565b8160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460146101000a81548161ffff021916908361ffff1602179055505050565b6111d46123ed565b5f5b600580549050811015611353578173ffffffffffffffffffffffffffffffffffffffff166005828154811061120e5761120d612dad565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361134057600560016005805490506112659190613312565b8154811061127657611275612dad565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600582815481106112b2576112b1612dad565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600580548061130957611308613345565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611353565b808061134b90612e07565b9150506111d6565b5050565b5f805f806113658686612535565b9050600a5f8281526020019081526020015f205f0154600a5f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a5f8481526020019081526020015f2060020154935093509350509250925092565b6008602052805f5260405f205f915054906101000a900463ffffffff1681565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114206123ed565b5f8190505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161145e9190612895565b602060405180830381865afa158015611479573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149d9190613386565b90505f81116114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d8906133fb565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6115066115ac565b846040518363ffffffff1660e01b8152600401611524929190613419565b6020604051808303815f875af1158015611540573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611564919061346a565b9050806115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159d906132f4565b60405180910390fd5b50505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b5f60015f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b60025f9054906101000a900460ff1681565b60058181548110611664575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61169982610886565b6116a281611c39565b6116ac8383611d3d565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611717906134df565b60405180910390fd5b5f8282905011611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90613547565b60405180910390fd5b5f83116117a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179e906135af565b60405180910390fd5b5f84905082829050846117ba91906135cd565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117f39190612895565b602060405180830381865afa15801561180e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118329190613386565b1015611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90613658565b60405180910390fd5b5f5b83839050811015611ae6575f73ffffffffffffffffffffffffffffffffffffffff168484838181106118aa576118a9612dad565b5b90506020020160208101906118bf9190612a1d565b73ffffffffffffffffffffffffffffffffffffffff1603611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190c906136c0565b60405180910390fd5b5f6119478886868581811061192d5761192c612dad565b5b90506020020160208101906119429190612a1d565b612535565b90505f600a5f8381526020019081526020015f20600201541461196a5750611ad3565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86868581811061199957611998612dad565b5b90506020020160208101906119ae9190612a1d565b886040518363ffffffff1660e01b81526004016119cc929190613419565b6020604051808303815f875af11580156119e8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0c919061346a565b506040518060600160405280878152602001868685818110611a3157611a30612dad565b5b9050602002016020810190611a469190612a1d565b73ffffffffffffffffffffffffffffffffffffffff16815260200142815250600a5f8381526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155905050505b8080611ade90612e07565b915050611875565b50505050505050565b611af76123ed565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b67575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611b5e9190612895565b60405180910390fd5b611b7081612474565b50565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900461ffff1681565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c4a81611c45611d36565b612567565b50565b5f611c5883836115d9565b611d2c576001805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611cc9611d36565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611d30565b5f90505b92915050565b5f33905090565b5f611d4883836115d9565b15611e1d575f60015f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611dba611d36565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611e21565b5f90505b92915050565b5f80839050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e87306040518363ffffffff1660e01b8152600401611e689291906136de565b602060405180830381865afa158015611e83573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ea79190613386565b1015611ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edf9061374f565b60405180910390fd5b5f8073ffffffffffffffffffffffffffffffffffffffff1660035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611f9357505f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561229d57600460169054906101000a900461ffff1661ffff16600460149054906101000a900461ffff1661ffff1685611fcd91906135cd565b611fd7919061379a565b90505f8185611fe69190613312565b9050600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603612158578573ffffffffffffffffffffffffffffffffffffffff166323b872dd8860045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b815260040161209b939291906137ca565b5f604051808303815f87803b1580156120b2575f80fd5b505af11580156120c4573d5f803e3d5ffd5b505050508573ffffffffffffffffffffffffffffffffffffffff166323b872dd8860035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612126939291906137ca565b5f604051808303815f87803b15801561213d575f80fd5b505af115801561214f573d5f803e3d5ffd5b50505050612297565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd8860045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016121b6939291906137ca565b6020604051808303815f875af11580156121d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121f6919061346a565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd8860035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612255939291906137ca565b6020604051808303815f875af1158015612271573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612295919061346a565b505b506123e1565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612361578473ffffffffffffffffffffffffffffffffffffffff166323b872dd8730876040518463ffffffff1660e01b815260040161232f939291906137ca565b5f604051808303815f87803b158015612346575f80fd5b505af1158015612358573d5f803e3d5ffd5b505050506123e0565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd8730876040518463ffffffff1660e01b815260040161239e939291906137ca565b6020604051808303815f875af11580156123ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123de919061346a565b505b5b80925050509392505050565b6123f5611d36565b73ffffffffffffffffffffffffffffffffffffffff166124136115ac565b73ffffffffffffffffffffffffffffffffffffffff161461247257612436611d36565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124699190612895565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f8282604051602001612549929190613864565b60405160208183030381529060405280519060200120905092915050565b61257182826115d9565b6125b45780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016125ab92919061388f565b60405180910390fd5b5050565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125f4816125c0565b81146125fe575f80fd5b50565b5f8135905061260f816125eb565b92915050565b5f6020828403121561262a576126296125b8565b5b5f61263784828501612601565b91505092915050565b5f8115159050919050565b61265481612640565b82525050565b5f60208201905061266d5f83018461264b565b92915050565b5f819050919050565b61268581612673565b811461268f575f80fd5b50565b5f813590506126a08161267c565b92915050565b5f602082840312156126bb576126ba6125b8565b5b5f6126c884828501612692565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6126fa826126d1565b9050919050565b61270a816126f0565b82525050565b61271981612673565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561275657808201518184015260208101905061273b565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61277b8261271f565b6127858185612729565b9350612795818560208601612739565b61279e81612761565b840191505092915050565b5f60c0820190506127bc5f830189612701565b6127c96020830188612710565b6127d66040830187612710565b6127e36060830186612710565b6127f06080830185612701565b81810360a08301526128028184612771565b9050979650505050505050565b5f819050919050565b6128218161280f565b811461282b575f80fd5b50565b5f8135905061283c81612818565b92915050565b5f60208284031215612857576128566125b8565b5b5f6128648482850161282e565b91505092915050565b6128768161280f565b82525050565b5f60208201905061288f5f83018461286d565b92915050565b5f6020820190506128a85f830184612701565b92915050565b6128b7816126f0565b81146128c1575f80fd5b50565b5f813590506128d2816128ae565b92915050565b5f80604083850312156128ee576128ed6125b8565b5b5f6128fb8582860161282e565b925050602061290c858286016128c4565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261293757612936612916565b5b8235905067ffffffffffffffff8111156129545761295361291a565b5b6020830191508360018202830111156129705761296f61291e565b5b9250929050565b5f805f806060858703121561298f5761298e6125b8565b5b5f61299c878288016128c4565b94505060206129ad87828801612692565b935050604085013567ffffffffffffffff8111156129ce576129cd6125bc565b5b6129da87828801612922565b925092505092959194509250565b5f6060820190506129fb5f830186612710565b612a086020830185612701565b612a156040830184612710565b949350505050565b5f60208284031215612a3257612a316125b8565b5b5f612a3f848285016128c4565b91505092915050565b60028110612a54575f80fd5b50565b5f81359050612a6581612a48565b92915050565b5f60208284031215612a8057612a7f6125b8565b5b5f612a8d84828501612a57565b91505092915050565b5f63ffffffff82169050919050565b612aae81612a96565b8114612ab8575f80fd5b50565b5f81359050612ac981612aa5565b92915050565b5f8060408385031215612ae557612ae46125b8565b5b5f612af2858286016128c4565b9250506020612b0385828601612abb565b9150509250929050565b5f602082019050612b205f830184612710565b92915050565b5f61ffff82169050919050565b612b3c81612b26565b82525050565b5f602082019050612b555f830184612b33565b92915050565b612b6481612b26565b8114612b6e575f80fd5b50565b5f81359050612b7f81612b5b565b92915050565b5f8060408385031215612b9b57612b9a6125b8565b5b5f612ba8858286016128c4565b9250506020612bb985828601612b71565b9150509250929050565b612bcc81612a96565b82525050565b5f602082019050612be55f830184612bc3565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60028110612c2957612c28612beb565b5b50565b5f819050612c3982612c18565b919050565b5f612c4882612c2c565b9050919050565b612c5881612c3e565b82525050565b5f602082019050612c715f830184612c4f565b92915050565b5f8083601f840112612c8c57612c8b612916565b5b8235905067ffffffffffffffff811115612ca957612ca861291a565b5b602083019150836020820283011115612cc557612cc461291e565b5b9250929050565b5f805f805f60808688031215612ce557612ce46125b8565b5b5f612cf28882890161282e565b9550506020612d03888289016128c4565b9450506040612d1488828901612692565b935050606086013567ffffffffffffffff811115612d3557612d346125bc565b5b612d4188828901612c77565b92509250509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612d9457607f821691505b602082108103612da757612da6612d50565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612e1182612673565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e4357612e42612dda565b5b600182019050919050565b7f546f6b656e206e6f7420737570706f72746564000000000000000000000000005f82015250565b5f612e82601383612729565b9150612e8d82612e4e565b602082019050919050565b5f6020820190508181035f830152612eaf81612e76565b9050919050565b7f636f6e7472616374206e6f7420726561647900000000000000000000000000005f82015250565b5f612eea601283612729565b9150612ef582612eb6565b602082019050919050565b5f6020820190508181035f830152612f1781612ede565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612fa77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f6c565b612fb18683612f6c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612fec612fe7612fe284612673565b612fc9565b612673565b9050919050565b5f819050919050565b61300583612fd2565b61301961301182612ff3565b848454612f78565b825550505050565b5f90565b61302d613021565b613038818484612ffc565b505050565b5b8181101561305b576130505f82613025565b60018101905061303e565b5050565b601f8211156130a05761307181612f4b565b61307a84612f5d565b81016020851015613089578190505b61309d61309585612f5d565b83018261303d565b50505b505050565b5f82821c905092915050565b5f6130c05f19846008026130a5565b1980831691505092915050565b5f6130d883836130b1565b9150826002028217905092915050565b6130f18261271f565b67ffffffffffffffff81111561310a57613109612f1e565b5b6131148254612d7d565b61311f82828561305f565b5f60209050601f831160018114613150575f841561313e578287015190505b61314885826130cd565b8655506131af565b601f19841661315e86612f4b565b5f5b8281101561318557848901518255600182019150602085019450602081019050613160565b868310156131a2578489015161319e601f8916826130b1565b8355505b6001600288020188555050505b505050505050565b5f6131c182612a96565b91506131cc83612a96565b9250828201905063ffffffff8111156131e8576131e7612dda565b5b92915050565b5f81905092915050565b828183375f83830152505050565b5f61321183856131ee565b935061321e8385846131f8565b82840190509392505050565b5f613236828486613206565b91508190509392505050565b5f6040820190506132555f830185612710565b6132626020830184612710565b9392505050565b5f81905092915050565b50565b5f6132815f83613269565b915061328c82613273565b5f82019050919050565b5f6132a082613276565b9150819050919050565b7f7769746864726177206661696c656400000000000000000000000000000000005f82015250565b5f6132de600f83612729565b91506132e9826132aa565b602082019050919050565b5f6020820190508181035f83015261330b816132d2565b9050919050565b5f61331c82612673565b915061332783612673565b925082820390508181111561333f5761333e612dda565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f815190506133808161267c565b92915050565b5f6020828403121561339b5761339a6125b8565b5b5f6133a884828501613372565b91505092915050565b7f6f7574206f662062616c616e636520696e20636f6e74726163740000000000005f82015250565b5f6133e5601a83612729565b91506133f0826133b1565b602082019050919050565b5f6020820190508181035f830152613412816133d9565b9050919050565b5f60408201905061342c5f830185612701565b6134396020830184612710565b9392505050565b61344981612640565b8114613453575f80fd5b50565b5f8151905061346481613440565b92915050565b5f6020828403121561347f5761347e6125b8565b5b5f61348c84828501613456565b91505092915050565b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f6134c9601583612729565b91506134d482613495565b602082019050919050565b5f6020820190508181035f8301526134f6816134bd565b9050919050565b7f4e6f20726563697069656e7473207370656369666965640000000000000000005f82015250565b5f613531601783612729565b915061353c826134fd565b602082019050919050565b5f6020820190508181035f83015261355e81613525565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f5f82015250565b5f613599602083612729565b91506135a482613565565b602082019050919050565b5f6020820190508181035f8301526135c68161358d565b9050919050565b5f6135d782612673565b91506135e283612673565b92508282026135f081612673565b9150828204841483151761360757613606612dda565b5b5092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63650000005f82015250565b5f613642601d83612729565b915061364d8261360e565b602082019050919050565b5f6020820190508181035f83015261366f81613636565b9050919050565b7f496e76616c696420726563697069656e742061646472657373000000000000005f82015250565b5f6136aa601983612729565b91506136b582613676565b602082019050919050565b5f6020820190508181035f8301526136d78161369e565b9050919050565b5f6040820190506136f15f830185612701565b6136fe6020830184612701565b9392505050565b7f6861766520746f20617070726f766520757361676520666972737400000000005f82015250565b5f613739601b83612729565b915061374482613705565b602082019050919050565b5f6020820190508181035f8301526137668161372d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6137a482612673565b91506137af83612673565b9250826137bf576137be61376d565b5b828204905092915050565b5f6060820190506137dd5f830186612701565b6137ea6020830185612701565b6137f76040830184612710565b949350505050565b5f819050919050565b6138196138148261280f565b6137ff565b82525050565b5f8160601b9050919050565b5f6138358261381f565b9050919050565b5f6138468261382b565b9050919050565b61385e613859826126f0565b61383c565b82525050565b5f61386f8285613808565b60208201915061387f828461384d565b6014820191508190509392505050565b5f6040820190506138a25f830185612701565b6138af602083018461286d565b939250505056fea264697066735822122052e9441a61d675b6c641fb46d6fa3bf7cf7ca2bc29b8a9f73c7dba25aeb41b0164736f6c63430008140033\r\n";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_FEE_RATE_BASE = "FEE_RATE_BASE";

    public static final String FUNC_OPERATOR_ROLE = "OPERATOR_ROLE";

    public static final String FUNC_STATE = "STATE";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_ADDSUPPORTEDTOKEN = "addSupportedToken";

    public static final String FUNC_AIRDROPRECORDS = "airdropRecords";

    public static final String FUNC_DISTRIBUTEAIRDROP = "distributeAirdrop";

    public static final String FUNC_FEE_RATE = "fee_rate";

    public static final String FUNC_FEE_VAULT = "fee_vault";

    public static final String FUNC_GETAIRDROPRECORD = "getAirdropRecord";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLAYERRECORDS = "playerRecords";

    public static final String FUNC_PLAYERRECORDSMAPPING = "playerRecordsMapping";

    public static final String FUNC_RECORDCOUNT = "recordCount";

    public static final String FUNC_RECORDS = "records";

    public static final String FUNC_REMOVESUPPORTEDTOKEN = "removeSupportedToken";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SETFEEVAULT = "setFeeVault";

    public static final String FUNC_SETSTATE = "setState";

    public static final String FUNC_SETUSDTLIKEADDRESS = "setUSDTLikeAddress";

    public static final String FUNC_SETVAULT = "setVault";

    public static final String FUNC_SUPPORTEDTOKENS = "supportedTokens";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USDTLIKEADDRESS = "usdtLikeAddress";

    public static final String FUNC_VAULT = "vault";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWTOKEN = "withdrawToken";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECORDCREATED_EVENT = new Event("RecordCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event RECORDREDEEMED_EVENT = new Event("RecordRedeemed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MoonBase(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MoonBase(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MoonBase(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MoonBase(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RecordCreatedEventResponse> getRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDCREATED_EVENT, transactionReceipt);
        ArrayList<RecordCreatedEventResponse> responses = new ArrayList<RecordCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.extraData = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RecordCreatedEventResponse> recordCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RecordCreatedEventResponse>() {
            @Override
            public RecordCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECORDCREATED_EVENT, log);
                RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.extraData = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RecordCreatedEventResponse> recordCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECORDCREATED_EVENT));
        return recordCreatedEventFlowable(filter);
    }

    public List<RecordRedeemedEventResponse> getRecordRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDREDEEMED_EVENT, transactionReceipt);
        ArrayList<RecordRedeemedEventResponse> responses = new ArrayList<RecordRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordRedeemedEventResponse typedResponse = new RecordRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.battleId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RecordRedeemedEventResponse> recordRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RecordRedeemedEventResponse>() {
            @Override
            public RecordRedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECORDREDEEMED_EVENT, log);
                RecordRedeemedEventResponse typedResponse = new RecordRedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.battleId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RecordRedeemedEventResponse> recordRedeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECORDREDEEMED_EVENT));
        return recordRedeemedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> FEE_RATE_BASE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_RATE_BASE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> OPERATOR_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPERATOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> STATE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addRecord(String _token, BigInteger _amount, String _extraData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token),
                        new org.web3j.abi.datatypes.generated.Uint256(_amount),
                        new org.web3j.abi.datatypes.Utf8String(_extraData)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSupportedToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSUPPORTEDTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> airdropRecords(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AIRDROPRECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> distributeAirdrop(byte[] id, String tokenAddress, BigInteger amount, List<String> recipients) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISTRIBUTEAIRDROP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id),
                        new org.web3j.abi.datatypes.Address(160, tokenAddress),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(recipients, org.web3j.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> fee_rate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_RATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> fee_vault() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_VAULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> getAirdropRecord(byte[] id, String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAIRDROPRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id),
                        new org.web3j.abi.datatypes.Address(160, tokenAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>> getRecord(BigInteger recordId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> playerRecords(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLAYERRECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> playerRecordsMapping(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLAYERRECORDSMAPPING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
                        new org.web3j.abi.datatypes.generated.Uint32(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> recordCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RECORDCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>> records(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removeSupportedToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVESUPPORTEDTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String callerConfirmation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, callerConfirmation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeVault(String _feeVaultAddress, BigInteger _feeRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEEVAULT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeVaultAddress),
                        new org.web3j.abi.datatypes.generated.Uint16(_feeRate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setState(BigInteger _state) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSTATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_state)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUSDTLikeAddress(String _usdtLikeAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUSDTLIKEADDRESS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdtLikeAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVault(String _vaultAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVAULT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _vaultAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> supportedTokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTEDTOKENS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> usdtLikeAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USDTLIKEADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> vault() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VAULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToken(String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MoonBase load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MoonBase(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MoonBase load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MoonBase(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MoonBase load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MoonBase(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MoonBase load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MoonBase(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MoonBase> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MoonBase.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MoonBase> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MoonBase.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MoonBase> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MoonBase.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MoonBase> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MoonBase.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RecordCreatedEventResponse extends BaseEventResponse {
        public String player;

        public byte[] extraData;

        public BigInteger recordId;

        public BigInteger amount;
    }

    public static class RecordRedeemedEventResponse extends BaseEventResponse {
        public String player;

        public BigInteger battleId;

        public BigInteger amount;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }
}
