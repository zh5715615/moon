package tcbv.zhaohui.moon.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class MoonBase extends Contract {
    public static final String BINARY = "6080604052600160025f6101000a81548160ff021916908360018111156200002c576200002b62000580565b5b021790555073dac17f958d2ee523a2206206994597c13d831ec7600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4600460146101000a81548161ffff021916908361ffff160217905550612710600460166101000a81548161ffff021916908361ffff160217905550348015620000d0575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000145575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200013c9190620005f0565b60405180910390fd5b6200015681620002b060201b60201c565b506060806005908051906020019062000171929190620004d7565b5073a841b274de2b521c10e77643071206004bbf8c0760035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507357ae92e2611887ef4c8ab58c45e74a16fbc8329e60045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200024c7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929336200037160201b60201c565b50620002615f801b336200037160201b60201c565b50620002a87f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92973171d1460a0b3a91b8438f6f776a8cd8a34d49dd46200037160201b60201c565b50506200060b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200038483836200046c60201b60201c565b62000462576001805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620003fe620004d060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905062000466565b5f90505b92915050565b5f60015f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b828054828255905f5260205f2090810192821562000550579160200282015b828111156200054f578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620004f6565b5b5090506200055f919062000563565b5090565b5b808211156200057c575f815f90555060010162000564565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620005d882620005ad565b9050919050565b620005ea81620005cc565b82525050565b5f602082019050620006055f830184620005df565b92915050565b61409280620006195f395ff3fe608060405234801561000f575f80fd5b5060043610610225575f3560e01c806373f885131161012e57806391d14854116100b6578063ea6c00231161007a578063ea6c002314610682578063f2fde38b1461069e578063f5b541a6146106ba578063fbfa77cf146106d8578063fcb53d36146106f657610225565b806391d14854146105ca578063a217fddf146105fa578063c486456c14610618578063c625562614610636578063d547741f1461066657610225565b80637c01800d116100fd5780637c01800d14610524578063819aa0071461055457806389476069146105725780638da5cb5b1461058e578063900407bc146105ac57610225565b806373f885131461049e57806376319190146104ba578063774fce51146104d65780637b2b5f67146104f257610225565b80633a40481d116101b15780635c413fa8116101805780635c413fa81461040e57806361c3efb11461043e5780636817031b1461045c5780636d69fcaf14610478578063715018a61461049457610225565b80633a40481d1461039a5780633ccfd60b146103cc5780634eeea2f2146103d657806356de96db146103f257610225565b806329728c6e116101f857806329728c6e146102f35780632f2ff15d14610311578063344610671461032d57806336568abe1461036257806337d629a61461037e57610225565b806301ffc9a71461022957806303e9e60914610259578063209a362c1461028e578063248a9ca3146102c3575b5f80fd5b610243600480360381019061023e9190612c38565b610714565b6040516102509190612c7d565b60405180910390f35b610273600480360381019061026e9190612cc9565b61078d565b60405161028596959493929190612dcc565b60405180910390f35b6102a860048036038101906102a39190612cc9565b6108ed565b6040516102ba96959493929190612dcc565b60405180910390f35b6102dd60048036038101906102d89190612e65565b610a4d565b6040516102ea9190612e9f565b60405180910390f35b6102fb610a6a565b6040516103089190612eb8565b60405180910390f35b61032b60048036038101906103269190612efb565b610a8f565b005b61034760048036038101906103429190612cc9565b610ab1565b60405161035996959493929190612dcc565b60405180910390f35b61037c60048036038101906103779190612efb565b610bad565b005b61039860048036038101906103939190612f9a565b610c28565b005b6103b460048036038101906103af9190612e65565b61108f565b6040516103c39392919061300b565b60405180910390f35b6103d46110d4565b005b6103f060048036038101906103eb9190613040565b611199565b005b61040c6004803603810190610407919061308e565b6111e5565b005b610428600480360381019061042391906130f2565b611219565b6040516104359190613130565b60405180910390f35b610446611239565b6040516104539190613165565b60405180910390f35b61047660048036038101906104719190613040565b61124d565b005b610492600480360381019061048d9190613040565b611298565b005b61049c611303565b005b6104b860048036038101906104b391906131a8565b611316565b005b6104d460048036038101906104cf9190613040565b61137f565b005b6104f060048036038101906104eb9190613290565b61150a565b005b61050c60048036038101906105079190612efb565b61197a565b60405161051b9392919061300b565b60405180910390f35b61053e60048036038101906105399190613040565b6119f5565b60405161054b9190613342565b60405180910390f35b61055c611a15565b6040516105699190612eb8565b60405180910390f35b61058c60048036038101906105879190613040565b611a3b565b005b610596611bcf565b6040516105a39190612eb8565b60405180910390f35b6105b4611bf6565b6040516105c19190613130565b60405180910390f35b6105e460048036038101906105df9190612efb565b611bfc565b6040516105f19190612c7d565b60405180910390f35b610602611c60565b60405161060f9190612e9f565b60405180910390f35b610620611c66565b60405161062d91906133ce565b60405180910390f35b610650600480360381019061064b9190612cc9565b611c78565b60405161065d9190612eb8565b60405180910390f35b610680600480360381019061067b9190612efb565b611cb3565b005b61069c600480360381019061069791906133e7565b611cd5565b005b6106b860048036038101906106b39190613040565b612112565b005b6106c2612196565b6040516106cf9190612e9f565b60405180910390f35b6106e06121ba565b6040516106ed9190612eb8565b60405180910390f35b6106fe6121df565b60405161070b9190613165565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107865750610785826121f3565b5b9050919050565b5f805f805f606060065f8881526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8981526020019081526020015f206001015460065f8a81526020019081526020015f206002015460065f8b81526020019081526020015f206003015460065f8c81526020019081526020015f206004015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8d81526020019081526020015f2060050180805461085a90613498565b80601f016020809104026020016040519081016040528092919081815260200182805461088690613498565b80156108d15780601f106108a8576101008083540402835291602001916108d1565b820191905f5260205f20905b8154815290600101906020018083116108b457829003601f168201915b5050505050905095509550955095509550955091939550919395565b5f805f805f606060065f8881526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8981526020019081526020015f206001015460065f8a81526020019081526020015f206002015460065f8b81526020019081526020015f206003015460065f8c81526020019081526020015f206004015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065f8d81526020019081526020015f206005018080546109ba90613498565b80601f01602080910402602001604051908101604052809291908181526020018280546109e690613498565b8015610a315780601f10610a0857610100808354040283529160200191610a31565b820191905f5260205f20905b815481529060010190602001808311610a1457829003601f168201915b5050505050905095509550955095509550955091939550919395565b5f60015f8381526020019081526020015f20600101549050919050565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a9882610a4d565b610aa18161225c565b610aab8383612270565b50505050565b6006602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054610b2c90613498565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5890613498565b8015610ba35780601f10610b7a57610100808354040283529160200191610ba3565b820191905f5260205f20905b815481529060010190602001808311610b8657829003601f168201915b5050505050905086565b610bb5612359565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c19576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c238282612360565b505050565b835f805b600580549050811015610cc3578273ffffffffffffffffffffffffffffffffffffffff1660058281548110610c6457610c636134c8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cb05760019150610cc3565b8080610cbb90613522565b915050610c2c565b5080610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb906135b3565b60405180910390fd5b600180811115610d1757610d1661335b565b5b60025f9054906101000a900460ff166001811115610d3857610d3761335b565b5b14610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f9061361b565b60405180910390fd5b5f610d8433888861244a565b90506040518060c001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018281526020015f81526020013373ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060065f60075481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019081610ef29190613803565b509050505f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900463ffffffff169050600181610f5391906138d2565b60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548163ffffffff021916908363ffffffff16021790555060075460095f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600184610ffb91906138d2565b63ffffffff1663ffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff167f5212e1a295c6c84c70054418822dc57308834e683568840f8282bd58f1d1913e6007548989896040516110669493929190613943565b60405180910390a260075f81548092919061108090613522565b91905055505050505050505050565b600a602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b6110dc612a10565b5f4790505f600190506110ed611bcf565b73ffffffffffffffffffffffffffffffffffffffff1682604051611110906139ae565b5f6040518083038185875af1925050503d805f811461114a576040519150601f19603f3d011682016040523d82523d5f602084013e61114f565b606091505b50508091505080611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118c90613a0c565b60405180910390fd5b5050565b6111a1612a10565b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111ed612a10565b8060025f6101000a81548160ff021916908360018111156112115761121061335b565b5b021790555050565b6009602052815f5260405f20602052805f5260405f205f91509150505481565b600460169054906101000a900461ffff1681565b611255612a10565b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112a0612a10565b600581908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61130b612a10565b6113145f612a97565b565b61131e612a10565b8160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460146101000a81548161ffff021916908361ffff1602179055505050565b611387612a10565b5f5b600580549050811015611506578173ffffffffffffffffffffffffffffffffffffffff16600582815481106113c1576113c06134c8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036114f357600560016005805490506114189190613a2a565b81548110611429576114286134c8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660058281548110611465576114646134c8565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058054806114bc576114bb613a5d565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611506565b80806114fe90613522565b915050611389565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f90613ad4565b60405180910390fd5b5f82829050116115bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b490613b3c565b60405180910390fd5b818190508484905014611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc90613bca565b60405180910390fd5b5f8590505f5b83839050811015611970575f86868381811061162a576116296134c8565b5b9050602002013590505f8103611640575061195d565b848490508161164f9190613be8565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116889190612eb8565b602060405180830381865afa1580156116a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116c79190613c3d565b1015611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ff90613cb2565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16858584818110611732576117316134c8565b5b90506020020160208101906117479190613040565b73ffffffffffffffffffffffffffffffffffffffff160361179d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179490613d1a565b60405180910390fd5b5f6117cf8a8787868181106117b5576117b46134c8565b5b90506020020160208101906117ca9190613040565b612b58565b90505f600a5f8381526020019081526020015f2060020154146117f357505061195d565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878786818110611822576118216134c8565b5b90506020020160208101906118379190613040565b846040518363ffffffff1660e01b8152600401611855929190613d38565b6020604051808303815f875af1158015611871573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118959190613d89565b5060405180606001604052808381526020018787868181106118ba576118b96134c8565b5b90506020020160208101906118cf9190613040565b73ffffffffffffffffffffffffffffffffffffffff16815260200142815250600a5f8381526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505050505b808061196890613522565b91505061160b565b5050505050505050565b5f805f806119888686612b58565b9050600a5f8281526020019081526020015f205f0154600a5f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a5f8481526020019081526020015f2060020154935093509350509250925092565b6008602052805f5260405f205f915054906101000a900463ffffffff1681565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a43612a10565b5f8190505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a819190612eb8565b602060405180830381865afa158015611a9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ac09190613c3d565b90505f8111611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb90613dfe565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611b29611bcf565b846040518363ffffffff1660e01b8152600401611b47929190613d38565b6020604051808303815f875af1158015611b63573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b879190613d89565b905080611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc090613a0c565b60405180910390fd5b50505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b5f60015f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b60025f9054906101000a900460ff1681565b60058181548110611c87575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cbc82610a4d565b611cc58161225c565b611ccf8383612360565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3a90613ad4565b60405180910390fd5b5f8282905011611d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7f90613b3c565b60405180910390fd5b5f8311611dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc190613e66565b60405180910390fd5b5f8490508282905084611ddd9190613be8565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e169190612eb8565b602060405180830381865afa158015611e31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e559190613c3d565b1015611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90613cb2565b60405180910390fd5b5f5b83839050811015612109575f73ffffffffffffffffffffffffffffffffffffffff16848483818110611ecd57611ecc6134c8565b5b9050602002016020810190611ee29190613040565b73ffffffffffffffffffffffffffffffffffffffff1603611f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2f90613d1a565b60405180910390fd5b5f611f6a88868685818110611f5057611f4f6134c8565b5b9050602002016020810190611f659190613040565b612b58565b90505f600a5f8381526020019081526020015f206002015414611f8d57506120f6565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb868685818110611fbc57611fbb6134c8565b5b9050602002016020810190611fd19190613040565b886040518363ffffffff1660e01b8152600401611fef929190613d38565b6020604051808303815f875af115801561200b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061202f9190613d89565b506040518060600160405280878152602001868685818110612054576120536134c8565b5b90506020020160208101906120699190613040565b73ffffffffffffffffffffffffffffffffffffffff16815260200142815250600a5f8381526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155905050505b808061210190613522565b915050611e98565b50505050505050565b61211a612a10565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361218a575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016121819190612eb8565b60405180910390fd5b61219381612a97565b50565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900461ffff1681565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61226d81612268612359565b612b8a565b50565b5f61227b8383611bfc565b61234f576001805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506122ec612359565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050612353565b5f90505b92915050565b5f33905090565b5f61236b8383611bfc565b15612440575f60015f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506123dd612359565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050612444565b5f90505b92915050565b5f80839050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e87306040518363ffffffff1660e01b815260040161248b929190613e84565b602060405180830381865afa1580156124a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124ca9190613c3d565b101561250b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250290613ef5565b60405180910390fd5b5f8073ffffffffffffffffffffffffffffffffffffffff1660035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156125b657505f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156128c057600460169054906101000a900461ffff1661ffff16600460149054906101000a900461ffff1661ffff16856125f09190613be8565b6125fa9190613f40565b90505f81856126099190613a2a565b9050600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361277b578573ffffffffffffffffffffffffffffffffffffffff166323b872dd8860045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016126be93929190613f70565b5f604051808303815f87803b1580156126d5575f80fd5b505af11580156126e7573d5f803e3d5ffd5b505050508573ffffffffffffffffffffffffffffffffffffffff166323b872dd8860035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161274993929190613f70565b5f604051808303815f87803b158015612760575f80fd5b505af1158015612772573d5f803e3d5ffd5b505050506128ba565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd8860045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016127d993929190613f70565b6020604051808303815f875af11580156127f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128199190613d89565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd8860035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161287893929190613f70565b6020604051808303815f875af1158015612894573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128b89190613d89565b505b50612a04565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612984578473ffffffffffffffffffffffffffffffffffffffff166323b872dd8730876040518463ffffffff1660e01b815260040161295293929190613f70565b5f604051808303815f87803b158015612969575f80fd5b505af115801561297b573d5f803e3d5ffd5b50505050612a03565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd8730876040518463ffffffff1660e01b81526004016129c193929190613f70565b6020604051808303815f875af11580156129dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a019190613d89565b505b5b80925050509392505050565b612a18612359565b73ffffffffffffffffffffffffffffffffffffffff16612a36611bcf565b73ffffffffffffffffffffffffffffffffffffffff1614612a9557612a59612359565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612a8c9190612eb8565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f8282604051602001612b6c92919061400a565b60405160208183030381529060405280519060200120905092915050565b612b948282611bfc565b612bd75780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401612bce929190614035565b60405180910390fd5b5050565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c1781612be3565b8114612c21575f80fd5b50565b5f81359050612c3281612c0e565b92915050565b5f60208284031215612c4d57612c4c612bdb565b5b5f612c5a84828501612c24565b91505092915050565b5f8115159050919050565b612c7781612c63565b82525050565b5f602082019050612c905f830184612c6e565b92915050565b5f819050919050565b612ca881612c96565b8114612cb2575f80fd5b50565b5f81359050612cc381612c9f565b92915050565b5f60208284031215612cde57612cdd612bdb565b5b5f612ceb84828501612cb5565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612d1d82612cf4565b9050919050565b612d2d81612d13565b82525050565b612d3c81612c96565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612d79578082015181840152602081019050612d5e565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612d9e82612d42565b612da88185612d4c565b9350612db8818560208601612d5c565b612dc181612d84565b840191505092915050565b5f60c082019050612ddf5f830189612d24565b612dec6020830188612d33565b612df96040830187612d33565b612e066060830186612d33565b612e136080830185612d24565b81810360a0830152612e258184612d94565b9050979650505050505050565b5f819050919050565b612e4481612e32565b8114612e4e575f80fd5b50565b5f81359050612e5f81612e3b565b92915050565b5f60208284031215612e7a57612e79612bdb565b5b5f612e8784828501612e51565b91505092915050565b612e9981612e32565b82525050565b5f602082019050612eb25f830184612e90565b92915050565b5f602082019050612ecb5f830184612d24565b92915050565b612eda81612d13565b8114612ee4575f80fd5b50565b5f81359050612ef581612ed1565b92915050565b5f8060408385031215612f1157612f10612bdb565b5b5f612f1e85828601612e51565b9250506020612f2f85828601612ee7565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612f5a57612f59612f39565b5b8235905067ffffffffffffffff811115612f7757612f76612f3d565b5b602083019150836001820283011115612f9357612f92612f41565b5b9250929050565b5f805f8060608587031215612fb257612fb1612bdb565b5b5f612fbf87828801612ee7565b9450506020612fd087828801612cb5565b935050604085013567ffffffffffffffff811115612ff157612ff0612bdf565b5b612ffd87828801612f45565b925092505092959194509250565b5f60608201905061301e5f830186612d33565b61302b6020830185612d24565b6130386040830184612d33565b949350505050565b5f6020828403121561305557613054612bdb565b5b5f61306284828501612ee7565b91505092915050565b60028110613077575f80fd5b50565b5f813590506130888161306b565b92915050565b5f602082840312156130a3576130a2612bdb565b5b5f6130b08482850161307a565b91505092915050565b5f63ffffffff82169050919050565b6130d1816130b9565b81146130db575f80fd5b50565b5f813590506130ec816130c8565b92915050565b5f806040838503121561310857613107612bdb565b5b5f61311585828601612ee7565b9250506020613126858286016130de565b9150509250929050565b5f6020820190506131435f830184612d33565b92915050565b5f61ffff82169050919050565b61315f81613149565b82525050565b5f6020820190506131785f830184613156565b92915050565b61318781613149565b8114613191575f80fd5b50565b5f813590506131a28161317e565b92915050565b5f80604083850312156131be576131bd612bdb565b5b5f6131cb85828601612ee7565b92505060206131dc85828601613194565b9150509250929050565b5f8083601f8401126131fb576131fa612f39565b5b8235905067ffffffffffffffff81111561321857613217612f3d565b5b60208301915083602082028301111561323457613233612f41565b5b9250929050565b5f8083601f8401126132505761324f612f39565b5b8235905067ffffffffffffffff81111561326d5761326c612f3d565b5b60208301915083602082028301111561328957613288612f41565b5b9250929050565b5f805f805f80608087890312156132aa576132a9612bdb565b5b5f6132b789828a01612e51565b96505060206132c889828a01612ee7565b955050604087013567ffffffffffffffff8111156132e9576132e8612bdf565b5b6132f589828a016131e6565b9450945050606087013567ffffffffffffffff81111561331857613317612bdf565b5b61332489828a0161323b565b92509250509295509295509295565b61333c816130b9565b82525050565b5f6020820190506133555f830184613333565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600281106133995761339861335b565b5b50565b5f8190506133a982613388565b919050565b5f6133b88261339c565b9050919050565b6133c8816133ae565b82525050565b5f6020820190506133e15f8301846133bf565b92915050565b5f805f805f60808688031215613400576133ff612bdb565b5b5f61340d88828901612e51565b955050602061341e88828901612ee7565b945050604061342f88828901612cb5565b935050606086013567ffffffffffffffff8111156134505761344f612bdf565b5b61345c8882890161323b565b92509250509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806134af57607f821691505b6020821081036134c2576134c161346b565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61352c82612c96565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361355e5761355d6134f5565b5b600182019050919050565b7f546f6b656e206e6f7420737570706f72746564000000000000000000000000005f82015250565b5f61359d601383612d4c565b91506135a882613569565b602082019050919050565b5f6020820190508181035f8301526135ca81613591565b9050919050565b7f636f6e7472616374206e6f7420726561647900000000000000000000000000005f82015250565b5f613605601283612d4c565b9150613610826135d1565b602082019050919050565b5f6020820190508181035f830152613632816135f9565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026136c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613687565b6136cc8683613687565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6137076137026136fd84612c96565b6136e4565b612c96565b9050919050565b5f819050919050565b613720836136ed565b61373461372c8261370e565b848454613693565b825550505050565b5f90565b61374861373c565b613753818484613717565b505050565b5b818110156137765761376b5f82613740565b600181019050613759565b5050565b601f8211156137bb5761378c81613666565b61379584613678565b810160208510156137a4578190505b6137b86137b085613678565b830182613758565b50505b505050565b5f82821c905092915050565b5f6137db5f19846008026137c0565b1980831691505092915050565b5f6137f383836137cc565b9150826002028217905092915050565b61380c82612d42565b67ffffffffffffffff81111561382557613824613639565b5b61382f8254613498565b61383a82828561377a565b5f60209050601f83116001811461386b575f8415613859578287015190505b61386385826137e8565b8655506138ca565b601f19841661387986613666565b5f5b828110156138a05784890151825560018201915060208501945060208101905061387b565b868310156138bd57848901516138b9601f8916826137cc565b8355505b6001600288020188555050505b505050505050565b5f6138dc826130b9565b91506138e7836130b9565b9250828201905063ffffffff811115613903576139026134f5565b5b92915050565b828183375f83830152505050565b5f6139228385612d4c565b935061392f838584613909565b61393883612d84565b840190509392505050565b5f6060820190506139565f830187612d33565b6139636020830186612d33565b8181036040830152613976818486613917565b905095945050505050565b5f81905092915050565b50565b5f6139995f83613981565b91506139a48261398b565b5f82019050919050565b5f6139b88261398e565b9150819050919050565b7f7769746864726177206661696c656400000000000000000000000000000000005f82015250565b5f6139f6600f83612d4c565b9150613a01826139c2565b602082019050919050565b5f6020820190508181035f830152613a23816139ea565b9050919050565b5f613a3482612c96565b9150613a3f83612c96565b9250828203905081811115613a5757613a566134f5565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f613abe601583612d4c565b9150613ac982613a8a565b602082019050919050565b5f6020820190508181035f830152613aeb81613ab2565b9050919050565b7f4e6f20726563697069656e7473207370656369666965640000000000000000005f82015250565b5f613b26601783612d4c565b9150613b3182613af2565b602082019050919050565b5f6020820190508181035f830152613b5381613b1a565b9050919050565b7f416d6f756e7473206c656e677468206d75737420657175616c732072656365705f8201527f69656e7473000000000000000000000000000000000000000000000000000000602082015250565b5f613bb4602583612d4c565b9150613bbf82613b5a565b604082019050919050565b5f6020820190508181035f830152613be181613ba8565b9050919050565b5f613bf282612c96565b9150613bfd83612c96565b9250828202613c0b81612c96565b91508282048414831517613c2257613c216134f5565b5b5092915050565b5f81519050613c3781612c9f565b92915050565b5f60208284031215613c5257613c51612bdb565b5b5f613c5f84828501613c29565b91505092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63650000005f82015250565b5f613c9c601d83612d4c565b9150613ca782613c68565b602082019050919050565b5f6020820190508181035f830152613cc981613c90565b9050919050565b7f496e76616c696420726563697069656e742061646472657373000000000000005f82015250565b5f613d04601983612d4c565b9150613d0f82613cd0565b602082019050919050565b5f6020820190508181035f830152613d3181613cf8565b9050919050565b5f604082019050613d4b5f830185612d24565b613d586020830184612d33565b9392505050565b613d6881612c63565b8114613d72575f80fd5b50565b5f81519050613d8381613d5f565b92915050565b5f60208284031215613d9e57613d9d612bdb565b5b5f613dab84828501613d75565b91505092915050565b7f6f7574206f662062616c616e636520696e20636f6e74726163740000000000005f82015250565b5f613de8601a83612d4c565b9150613df382613db4565b602082019050919050565b5f6020820190508181035f830152613e1581613ddc565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f5f82015250565b5f613e50602083612d4c565b9150613e5b82613e1c565b602082019050919050565b5f6020820190508181035f830152613e7d81613e44565b9050919050565b5f604082019050613e975f830185612d24565b613ea46020830184612d24565b9392505050565b7f6861766520746f20617070726f766520757361676520666972737400000000005f82015250565b5f613edf601b83612d4c565b9150613eea82613eab565b602082019050919050565b5f6020820190508181035f830152613f0c81613ed3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613f4a82612c96565b9150613f5583612c96565b925082613f6557613f64613f13565b5b828204905092915050565b5f606082019050613f835f830186612d24565b613f906020830185612d24565b613f9d6040830184612d33565b949350505050565b5f819050919050565b613fbf613fba82612e32565b613fa5565b82525050565b5f8160601b9050919050565b5f613fdb82613fc5565b9050919050565b5f613fec82613fd1565b9050919050565b614004613fff82612d13565b613fe2565b82525050565b5f6140158285613fae565b6020820191506140258284613ff3565b6014820191508190509392505050565b5f6040820190506140485f830185612d24565b6140556020830184612e90565b939250505056fea264697066735822122025094daac577f18a8e8661c1f75d66969989f9d0a49749e8cbdd1889afa3a16b64736f6c63430008140033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_FEE_RATE_BASE = "FEE_RATE_BASE";

    public static final String FUNC_OPERATOR_ROLE = "OPERATOR_ROLE";

    public static final String FUNC_STATE = "STATE";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_ADDSUPPORTEDTOKEN = "addSupportedToken";

    public static final String FUNC_AIRDROPRECORDS = "airdropRecords";

    public static final String FUNC_DISTRIBUTEAIRDROP = "distributeAirdrop";

    public static final String FUNC_DISTRIBUTEAIRDROP2 = "distributeAirdrop2";

    public static final String FUNC_FEE_RATE = "fee_rate";

    public static final String FUNC_FEE_VAULT = "fee_vault";

    public static final String FUNC_GETAIRDROPRECORD = "getAirdropRecord";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETRECORDSTRUCT = "getRecordStruct";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLAYERRECORDS = "playerRecords";

    public static final String FUNC_PLAYERRECORDSMAPPING = "playerRecordsMapping";

    public static final String FUNC_RECORDCOUNT = "recordCount";

    public static final String FUNC_RECORDS = "records";

    public static final String FUNC_REMOVESUPPORTEDTOKEN = "removeSupportedToken";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SETFEEVAULT = "setFeeVault";

    public static final String FUNC_SETSTATE = "setState";

    public static final String FUNC_SETUSDTLIKEADDRESS = "setUSDTLikeAddress";

    public static final String FUNC_SETVAULT = "setVault";

    public static final String FUNC_SUPPORTEDTOKENS = "supportedTokens";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USDTLIKEADDRESS = "usdtLikeAddress";

    public static final String FUNC_VAULT = "vault";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWTOKEN = "withdrawToken";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECORDCREATED_EVENT = new Event("RecordCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event RECORDREDEEMED_EVENT = new Event("RecordRedeemed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MoonBase(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MoonBase(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MoonBase(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MoonBase(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RecordCreatedEventResponse> getRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDCREATED_EVENT, transactionReceipt);
        ArrayList<RecordCreatedEventResponse> responses = new ArrayList<RecordCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.extraData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RecordCreatedEventResponse> recordCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RecordCreatedEventResponse>() {
            @Override
            public RecordCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECORDCREATED_EVENT, log);
                RecordCreatedEventResponse typedResponse = new RecordCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.recordId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.extraData = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RecordCreatedEventResponse> recordCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECORDCREATED_EVENT));
        return recordCreatedEventFlowable(filter);
    }

    public List<RecordRedeemedEventResponse> getRecordRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECORDREDEEMED_EVENT, transactionReceipt);
        ArrayList<RecordRedeemedEventResponse> responses = new ArrayList<RecordRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecordRedeemedEventResponse typedResponse = new RecordRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.battleId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RecordRedeemedEventResponse> recordRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RecordRedeemedEventResponse>() {
            @Override
            public RecordRedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECORDREDEEMED_EVENT, log);
                RecordRedeemedEventResponse typedResponse = new RecordRedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.player = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.battleId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RecordRedeemedEventResponse> recordRedeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECORDREDEEMED_EVENT));
        return recordRedeemedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> FEE_RATE_BASE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_RATE_BASE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> OPERATOR_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPERATOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> STATE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addRecord(String _token, BigInteger _amount, String _extraData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token),
                        new org.web3j.abi.datatypes.generated.Uint256(_amount),
                        new org.web3j.abi.datatypes.Utf8String(_extraData)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSupportedToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSUPPORTEDTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> airdropRecords(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AIRDROPRECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> distributeAirdrop(byte[] id, String tokenAddress, BigInteger amount, List<String> recipients) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISTRIBUTEAIRDROP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id),
                        new org.web3j.abi.datatypes.Address(160, tokenAddress),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(recipients, org.web3j.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributeAirdrop2(byte[] id, String tokenAddress, List<BigInteger> amounts, List<String> recipients) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISTRIBUTEAIRDROP2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id),
                        new org.web3j.abi.datatypes.Address(160, tokenAddress),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(recipients, org.web3j.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> fee_rate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_RATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> fee_vault() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEE_VAULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> getAirdropRecord(byte[] id, String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAIRDROPRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id),
                        new org.web3j.abi.datatypes.Address(160, tokenAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>> getRecord(BigInteger recordId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECORD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>> getRecordStruct(BigInteger recordId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECORDSTRUCT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> playerRecords(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLAYERRECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> playerRecordsMapping(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLAYERRECORDSMAPPING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
                        new org.web3j.abi.datatypes.generated.Uint32(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> recordCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RECORDCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>> records(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RECORDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removeSupportedToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVESUPPORTEDTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String callerConfirmation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, callerConfirmation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeVault(String _feeVaultAddress, BigInteger _feeRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEEVAULT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeVaultAddress),
                        new org.web3j.abi.datatypes.generated.Uint16(_feeRate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setState(BigInteger _state) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSTATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_state)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUSDTLikeAddress(String _usdtLikeAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUSDTLIKEADDRESS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _usdtLikeAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVault(String _vaultAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVAULT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _vaultAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> supportedTokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTEDTOKENS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> usdtLikeAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USDTLIKEADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> vault() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VAULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToken(String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MoonBase load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MoonBase(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MoonBase load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MoonBase(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MoonBase load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MoonBase(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MoonBase load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MoonBase(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MoonBase> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MoonBase.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MoonBase> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MoonBase.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MoonBase> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MoonBase.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MoonBase> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MoonBase.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RecordCreatedEventResponse extends BaseEventResponse {
        public String player;

        public BigInteger recordId;

        public BigInteger amount;

        public String extraData;
    }

    public static class RecordRedeemedEventResponse extends BaseEventResponse {
        public String player;

        public BigInteger battleId;

        public BigInteger amount;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }
}